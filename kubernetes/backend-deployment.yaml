apiVersion: v1
kind: Service
metadata:
  name: jivs-backend-service
  namespace: jivs-platform
  labels:
    app: jivs-backend
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app: jivs-backend

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jivs-backend
  namespace: jivs-platform
spec:
  replicas: 3
  selector:
    matchLabels:
      app: jivs-backend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: jivs-backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jivs-backend
                topologyKey: kubernetes.io/hostname
      containers:
        - name: backend
          image: jivs-backend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 9010
              name: jmx
          env:
            - name: SPRING_PROFILE
              valueFrom:
                configMapKeyRef:
                  name: jivs-backend-config
                  key: SPRING_PROFILE
            - name: SERVER_PORT
              valueFrom:
                configMapKeyRef:
                  name: jivs-backend-config
                  key: SERVER_PORT
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: jivs-backend-config
                  key: DATABASE_URL
            - name: DATABASE_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: jivs-backend-config
                  key: DATABASE_USERNAME
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jivs-backend-secrets
                  key: DATABASE_PASSWORD
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: jivs-backend-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: jivs-backend-config
                  key: REDIS_PORT
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jivs-backend-secrets
                  key: REDIS_PASSWORD
            - name: ELASTICSEARCH_URIS
              valueFrom:
                configMapKeyRef:
                  name: jivs-backend-config
                  key: ELASTICSEARCH_URIS
            - name: RABBITMQ_HOST
              valueFrom:
                configMapKeyRef:
                  name: jivs-backend-config
                  key: RABBITMQ_HOST
            - name: RABBITMQ_PORT
              valueFrom:
                configMapKeyRef:
                  name: jivs-backend-config
                  key: RABBITMQ_PORT
            - name: RABBITMQ_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: jivs-backend-config
                  key: RABBITMQ_USERNAME
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jivs-backend-secrets
                  key: RABBITMQ_PASSWORD
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: jivs-backend-secrets
                  key: JWT_SECRET
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: jivs-backend-secrets
                  key: ENCRYPTION_KEY
            - name: AWS_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: jivs-backend-secrets
                  key: AWS_ACCESS_KEY
            - name: AWS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: jivs-backend-secrets
                  key: AWS_SECRET_KEY
            - name: JAVA_OPTS
              value: >-
                -Xms2g -Xmx4g
                -XX:+UseG1GC
                -XX:MaxGCPauseMillis=200
                -XX:+HeapDumpOnOutOfMemoryError
                -XX:HeapDumpPath=/app/logs/heapdump.hprof
                -Dcom.sun.management.jmxremote
                -Dcom.sun.management.jmxremote.port=9010
                -Dcom.sun.management.jmxremote.authenticate=false
                -Dcom.sun.management.jmxremote.ssl=false
                -Dcom.sun.management.jmxremote.local.only=false
                -Dcom.sun.management.jmxremote.rmi.port=9010
                -Djava.rmi.server.hostname=127.0.0.1
          resources:
            requests:
              memory: "3Gi"
              cpu: "1500m"
            limits:
              memory: "5Gi"
              cpu: "2500m"
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: logs
              mountPath: /app/logs
            - name: storage
              mountPath: /var/jivs/storage
            - name: extraction-temp
              mountPath: /tmp/jivs/extraction
      volumes:
        - name: logs
          emptyDir: {}
        - name: storage
          persistentVolumeClaim:
            claimName: jivs-backend-storage
        - name: extraction-temp
          emptyDir:
            sizeLimit: 20Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jivs-backend-storage
  namespace: jivs-platform
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "standard"
  resources:
    requests:
      storage: 500Gi

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: jivs-backend-hpa
  namespace: jivs-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: jivs-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 2
          periodSeconds: 15
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: jivs-backend-pdb
  namespace: jivs-platform
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: jivs-backend
