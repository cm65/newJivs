name: Scheduled Continuous Testing

# This workflow runs comprehensive tests on a regular schedule to ensure
# ongoing code quality and catch any issues early, even when no commits are made.

on:
  schedule:
    # Run quick tests every 2 hours during business hours (9 AM - 6 PM UTC, Mon-Fri)
    - cron: '0 9,11,13,15,17 * * 1-5'

    # Run standard tests twice daily (morning and evening)
    - cron: '0 8,18 * * *'

    # Run full test suite nightly at 2 AM UTC
    - cron: '0 2 * * *'

    # Run comprehensive weekend validation (Saturday 3 AM UTC)
    - cron: '0 3 * * 6'

  # Allow manual trigger for on-demand testing
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test execution mode'
        required: true
        default: 'standard'
        type: choice
        options:
          - quick
          - standard
          - full
          - performance
      notify_on_failure:
        description: 'Send notifications on failure'
        required: false
        default: true
        type: boolean

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '20'
  MAVEN_OPTS: '-Xmx2048m'

jobs:
  # ============================================================================
  # QUICK TESTS (Every 2 hours during business hours)
  # ============================================================================
  quick-tests:
    name: Quick Test Suite
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9,11,13,15,17 * * 1-5' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_mode == 'quick')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('backend/pom.xml') }}
          restore-keys: maven-${{ runner.os }}-

      - name: Install dependencies
        run: |
          cd backend && mvn dependency:resolve -q
          cd ../frontend && npm ci --silent

      - name: Run quick tests
        run: |
          chmod +x scripts/test-orchestrator.sh
          ./scripts/test-orchestrator.sh quick

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quick-test-results-${{ github.run_number }}
          path: test-reports/
          retention-days: 7

  # ============================================================================
  # STANDARD TESTS (Twice daily)
  # ============================================================================
  standard-tests:
    name: Standard Test Suite
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 8,18 * * *' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_mode == 'standard')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: jivs_user
          POSTGRES_PASSWORD: jivs_password
          POSTGRES_DB: jivs_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('backend/pom.xml') }}
          restore-keys: maven-${{ runner.os }}-

      - name: Install dependencies
        run: |
          cd backend && mvn dependency:resolve -q
          cd ../frontend && npm ci --silent

      - name: Run standard tests
        run: |
          chmod +x scripts/test-orchestrator.sh
          ./scripts/test-orchestrator.sh standard

      - name: Generate coverage report
        if: always()
        run: |
          cd backend && mvn jacoco:report
          cd ../frontend && npm run test:coverage

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: standard-test-results-${{ github.run_number }}
          path: |
            test-reports/
            backend/target/site/jacoco/
            frontend/coverage/
          retention-days: 14

  # ============================================================================
  # FULL NIGHTLY TESTS (2 AM UTC)
  # ============================================================================
  full-nightly-tests:
    name: Full Nightly Test Suite
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_mode == 'full')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: jivs_user
          POSTGRES_PASSWORD: jivs_password
          POSTGRES_DB: jivs_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      elasticsearch:
        image: elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium firefox

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('backend/pom.xml') }}
          restore-keys: maven-${{ runner.os }}-

      - name: Install dependencies
        run: |
          cd backend && mvn dependency:resolve -q
          cd ../frontend && npm ci --silent

      - name: Run full test suite
        run: |
          chmod +x scripts/test-orchestrator.sh
          ./scripts/test-orchestrator.sh full
        env:
          CI: true
          DATABASE_URL: postgresql://jivs_user:jivs_password@localhost:5432/jivs_test
          REDIS_URL: redis://localhost:6379
          ELASTICSEARCH_URL: http://localhost:9200

      - name: Run performance tests
        if: success()
        run: |
          # Install k6 for load testing
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

          # Run performance tests if they exist
          if [ -f "tests/performance/load-test.js" ]; then
            k6 run --vus 50 --duration 5m tests/performance/load-test.js
          fi

      - name: Security scanning
        if: success()
        run: |
          # OWASP dependency check
          cd backend
          mvn org.owasp:dependency-check-maven:check || true

          # npm audit
          cd ../frontend
          npm audit --audit-level=high || true

      - name: Generate comprehensive report
        if: always()
        run: |
          echo "# Nightly Test Report - $(date)" > test-reports/nightly-report.md
          echo "" >> test-reports/nightly-report.md
          echo "## Test Summary" >> test-reports/nightly-report.md
          echo "- Contract Tests: $(grep -c "✅" test-reports/contract/*.log 2>/dev/null || echo 0) passed" >> test-reports/nightly-report.md
          echo "- Unit Tests: $(grep -c "Tests run:" test-reports/unit/*.log 2>/dev/null || echo 0) suites" >> test-reports/nightly-report.md
          echo "- Integration Tests: $(grep -c "✅" test-reports/integration/*.log 2>/dev/null || echo 0) passed" >> test-reports/nightly-report.md
          echo "- E2E Tests: $(grep -c "passed" test-reports/e2e/*.log 2>/dev/null || echo 0) passed" >> test-reports/nightly-report.md

      - name: Upload comprehensive results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-test-results-${{ github.run_number }}
          path: |
            test-reports/
            backend/target/site/
            frontend/coverage/
            frontend/playwright-report/
          retention-days: 30

  # ============================================================================
  # WEEKEND VALIDATION (Saturday 3 AM)
  # ============================================================================
  weekend-validation:
    name: Weekend Comprehensive Validation
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 3 * * 6'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run infrastructure verification
        run: |
          chmod +x scripts/verify-testing-infrastructure.sh
          ./scripts/verify-testing-infrastructure.sh

      - name: Generate weekly metrics
        run: |
          echo "# Weekly Testing Metrics - Week $(date +%V)" > test-reports/weekly-metrics.md
          echo "" >> test-reports/weekly-metrics.md
          echo "## Infrastructure Health" >> test-reports/weekly-metrics.md
          echo "- Test Files: $(find . -name "*.test.*" -o -name "*Test.java" | wc -l)" >> test-reports/weekly-metrics.md
          echo "- Coverage Scripts: $(ls -1 scripts/*.sh | wc -l)" >> test-reports/weekly-metrics.md
          echo "- CI/CD Workflows: $(ls -1 .github/workflows/*.yml | wc -l)" >> test-reports/weekly-metrics.md

      - name: Upload weekly report
        uses: actions/upload-artifact@v4
        with:
          name: weekly-validation-${{ github.run_number }}
          path: test-reports/
          retention-days: 90

  # ============================================================================
  # NOTIFICATION JOB
  # ============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [quick-tests, standard-tests, full-nightly-tests, weekend-validation]
    if: always() && (failure() || cancelled()) && (github.event_name == 'schedule' || github.event.inputs.notify_on_failure == 'true')

    steps:
      - name: Prepare notification
        run: |
          if [ "${{ needs.quick-tests.result }}" == "failure" ]; then
            echo "Quick tests failed"
            echo "STATUS=failed" >> $GITHUB_ENV
            echo "TEST_TYPE=Quick" >> $GITHUB_ENV
          elif [ "${{ needs.standard-tests.result }}" == "failure" ]; then
            echo "Standard tests failed"
            echo "STATUS=failed" >> $GITHUB_ENV
            echo "TEST_TYPE=Standard" >> $GITHUB_ENV
          elif [ "${{ needs.full-nightly-tests.result }}" == "failure" ]; then
            echo "Nightly tests failed"
            echo "STATUS=failed" >> $GITHUB_ENV
            echo "TEST_TYPE=Nightly" >> $GITHUB_ENV
          elif [ "${{ needs.weekend-validation.result }}" == "failure" ]; then
            echo "Weekend validation failed"
            echo "STATUS=failed" >> $GITHUB_ENV
            echo "TEST_TYPE=Weekend" >> $GITHUB_ENV
          else
            echo "Tests cancelled or unknown failure"
            echo "STATUS=cancelled" >> $GITHUB_ENV
            echo "TEST_TYPE=Unknown" >> $GITHUB_ENV
          fi

      - name: Send Slack notification
        if: env.STATUS == 'failed'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "🚨 Scheduled ${{ env.TEST_TYPE }} Tests Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*🚨 Scheduled Test Failure Alert*\n\n*Test Type:* ${{ env.TEST_TYPE }}\n*Repository:* ${{ github.repository }}\n*Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub issue for failure
        if: env.STATUS == 'failed' && github.event.schedule == '0 2 * * *'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Nightly Test Failure - ${new Date().toISOString().split('T')[0]}`,
              body: `## Automated Test Failure Report\n\n**Test Type:** ${{ env.TEST_TYPE }}\n**Run ID:** ${{ github.run_id }}\n**Time:** ${new Date().toISOString()}\n\n[View Test Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n### Action Required\n- [ ] Investigate test failures\n- [ ] Fix identified issues\n- [ ] Re-run tests to verify fixes\n\n---\n*This issue was automatically created by the scheduled testing workflow.*`,
              labels: ['test-failure', 'automated', 'high-priority']
            });
            console.log(`Created issue #${issue.data.number}`);

# ============================================================================
# Schedule Summary:
# - Quick tests: Every 2 hours during business hours (Mon-Fri, 9 AM - 6 PM UTC)
# - Standard tests: Twice daily (8 AM and 6 PM UTC)
# - Full tests: Nightly at 2 AM UTC
# - Weekend validation: Saturday at 3 AM UTC
#
# Manual trigger available with test mode selection and notification control
# ============================================================================