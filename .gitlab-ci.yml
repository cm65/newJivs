# JiVS Platform GitLab CI/CD Pipeline

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

  # Image names
  BACKEND_IMAGE: $CI_REGISTRY_IMAGE/backend
  FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend

stages:
  - security
  - test
  - build
  - scan
  - deploy
  - performance

# Cache configuration
.maven_cache:
  cache:
    key: ${CI_COMMIT_REF_SLUG}-maven
    paths:
      - .m2/repository

.npm_cache:
  cache:
    key: ${CI_COMMIT_REF_SLUG}-npm
    paths:
      - frontend/node_modules

# ============================================
# Security Stage
# ============================================

secret-detection:
  stage: security
  image: alpine:latest
  script:
    - apk add --no-cache git
    - git clone https://github.com/trufflesecurity/trufflehog.git
    - cd trufflehog
    - ./trufflehog filesystem $CI_PROJECT_DIR --json
  allow_failure: true

dependency-scanning:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy fs --severity HIGH,CRITICAL --format json --output trivy-fs-report.json .
  artifacts:
    reports:
      dependency_scanning: trivy-fs-report.json
  allow_failure: true

# ============================================
# Test Stage
# ============================================

backend-test:
  stage: test
  image: maven:3.9-eclipse-temurin-21
  extends: .maven_cache
  services:
    - name: postgres:15-alpine
      alias: postgres
    - name: redis:7-alpine
      alias: redis
  variables:
    POSTGRES_DB: jivs_test
    POSTGRES_USER: jivs
    POSTGRES_PASSWORD: test_password
    DATABASE_URL: jdbc:postgresql://postgres:5432/jivs_test
    DATABASE_USERNAME: jivs
    DATABASE_PASSWORD: test_password
    REDIS_HOST: redis
    REDIS_PORT: 6379
  script:
    - cd backend
    - mvn $MAVEN_CLI_OPTS clean test
    - mvn $MAVEN_CLI_OPTS verify -DskipUnitTests
    - mvn jacoco:report
  artifacts:
    reports:
      junit:
        - backend/target/surefire-reports/TEST-*.xml
        - backend/target/failsafe-reports/TEST-*.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/target/site/jacoco/jacoco.xml
  coverage: '/Total.*?([0-9]{1,3})%/'

frontend-test:
  stage: test
  image: node:18-alpine
  extends: .npm_cache
  script:
    - cd frontend
    - npm ci
    - npm run lint
    - npm test -- --coverage --watchAll=false
    - npm run build
  artifacts:
    reports:
      junit: frontend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
    paths:
      - frontend/dist
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'

# ============================================
# Build Stage
# ============================================

backend-build:
  stage: build
  image: maven:3.9-eclipse-temurin-21
  extends: .maven_cache
  script:
    - cd backend
    - mvn $MAVEN_CLI_OPTS clean package -DskipTests
  artifacts:
    paths:
      - backend/target/*.jar
    expire_in: 1 day

docker-backend:
  stage: build
  image: docker:24-git
  services:
    - docker:24-dind
  needs:
    - backend-build
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd backend
    - |
      docker build \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VCS_REF=$CI_COMMIT_SHORT_SHA \
        --build-arg VERSION=$CI_COMMIT_TAG \
        -t $BACKEND_IMAGE:$CI_COMMIT_SHA \
        -t $BACKEND_IMAGE:$CI_COMMIT_REF_SLUG \
        -t $BACKEND_IMAGE:latest \
        .
    - docker push $BACKEND_IMAGE:$CI_COMMIT_SHA
    - docker push $BACKEND_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $BACKEND_IMAGE:latest

docker-frontend:
  stage: build
  image: docker:24-git
  services:
    - docker:24-dind
  needs:
    - frontend-test
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd frontend
    - |
      docker build \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VCS_REF=$CI_COMMIT_SHORT_SHA \
        --build-arg VERSION=$CI_COMMIT_TAG \
        -t $FRONTEND_IMAGE:$CI_COMMIT_SHA \
        -t $FRONTEND_IMAGE:$CI_COMMIT_REF_SLUG \
        -t $FRONTEND_IMAGE:latest \
        .
    - docker push $FRONTEND_IMAGE:$CI_COMMIT_SHA
    - docker push $FRONTEND_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $FRONTEND_IMAGE:latest

# ============================================
# Scan Stage
# ============================================

container-scanning-backend:
  stage: scan
  image: aquasec/trivy:latest
  needs:
    - docker-backend
  script:
    - trivy image --severity HIGH,CRITICAL --format json --output trivy-backend-report.json $BACKEND_IMAGE:$CI_COMMIT_SHA
  artifacts:
    reports:
      container_scanning: trivy-backend-report.json
  allow_failure: true

container-scanning-frontend:
  stage: scan
  image: aquasec/trivy:latest
  needs:
    - docker-frontend
  script:
    - trivy image --severity HIGH,CRITICAL --format json --output trivy-frontend-report.json $FRONTEND_IMAGE:$CI_COMMIT_SHA
  artifacts:
    reports:
      container_scanning: trivy-frontend-report.json
  allow_failure: true

# ============================================
# Deploy Stage
# ============================================

deploy-staging:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: staging
    url: https://staging.jivs.example.com
  only:
    - develop
  needs:
    - docker-backend
    - docker-frontend
  before_script:
    - mkdir -p ~/.kube
    - echo $KUBE_CONFIG_STAGING | base64 -d > ~/.kube/config
  script:
    - |
      kubectl set image deployment/jivs-backend \
        backend=$BACKEND_IMAGE:$CI_COMMIT_SHA \
        -n jivs-staging
    - |
      kubectl set image deployment/jivs-frontend \
        frontend=$FRONTEND_IMAGE:$CI_COMMIT_SHA \
        -n jivs-staging
    - kubectl rollout status deployment/jivs-backend -n jivs-staging --timeout=5m
    - kubectl rollout status deployment/jivs-frontend -n jivs-staging --timeout=5m
    - sleep 30
    - curl -f https://staging.jivs.example.com/actuator/health

deploy-production:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://jivs.example.com
  only:
    - main
  when: manual
  needs:
    - docker-backend
    - docker-frontend
  before_script:
    - mkdir -p ~/.kube
    - echo $KUBE_CONFIG_PROD | base64 -d > ~/.kube/config
  script:
    - |
      kubectl set image deployment/jivs-backend \
        backend=$BACKEND_IMAGE:$CI_COMMIT_SHA \
        -n jivs-platform
    - |
      kubectl set image deployment/jivs-frontend \
        frontend=$FRONTEND_IMAGE:$CI_COMMIT_SHA \
        -n jivs-platform
    - kubectl rollout status deployment/jivs-backend -n jivs-platform --timeout=5m
    - kubectl rollout status deployment/jivs-frontend -n jivs-platform --timeout=5m
    - sleep 30
    - curl -f https://jivs.example.com/actuator/health

# ============================================
# Performance Stage
# ============================================

load-test:
  stage: performance
  image: grafana/k6:latest
  only:
    - schedules
    - web
  script:
    - k6 run --out json=load-test-results.json load-tests/k6-load-test.js
  artifacts:
    paths:
      - load-test-results.json
    expire_in: 30 days
  allow_failure: true
