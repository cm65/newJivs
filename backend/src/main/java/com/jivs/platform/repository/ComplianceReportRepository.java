package com.jivs.platform.repository;

import com.jivs.platform.domain.compliance.ComplianceReport;
import com.jivs.platform.domain.compliance.Regulation;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Repository for ComplianceReport entity
 */
@Repository
public interface ComplianceReportRepository extends JpaRepository<ComplianceReport, Long> {

    /**
     * Find reports by regulation
     */
    List<ComplianceReport> findByRegulation(Regulation regulation);

    /**
     * Find reports by report date range
     */
    List<ComplianceReport> findByReportDateBetween(LocalDateTime start, LocalDateTime end);

    /**
     * Find reports by period
     */
    @Query("SELECT cr FROM ComplianceReport cr WHERE cr.periodStart >= :start " +
           "AND cr.periodEnd <= :end")
    List<ComplianceReport> findByPeriodRange(@Param("start") LocalDateTime start,
                                             @Param("end") LocalDateTime end);

    /**
     * Find published reports
     */
    List<ComplianceReport> findByIsPublished(Boolean published);

    /**
     * Find reports by regulation and published status
     */
    List<ComplianceReport> findByRegulationAndIsPublished(Regulation regulation, Boolean published);

    /**
     * Find latest report for regulation
     */
    Optional<ComplianceReport> findFirstByRegulationOrderByReportDateDesc(Regulation regulation);

    /**
     * Find reports generated by user
     */
    List<ComplianceReport> findByGeneratedBy(String generatedBy);

    /**
     * Find reports with data breaches
     */
    @Query("SELECT cr FROM ComplianceReport cr WHERE cr.dataBreachCount > 0")
    List<ComplianceReport> findReportsWithBreaches();

    /**
     * Find reports with privacy incidents
     */
    @Query("SELECT cr FROM ComplianceReport cr WHERE cr.privacyIncidents > 0")
    List<ComplianceReport> findReportsWithIncidents();

    /**
     * Find reports with low compliance rate
     */
    @Query("SELECT cr FROM ComplianceReport cr WHERE cr.complianceRate < :threshold")
    List<ComplianceReport> findReportsWithLowCompliance(@Param("threshold") Double threshold);

    /**
     * Find reports with overdue requests
     */
    @Query("SELECT cr FROM ComplianceReport cr WHERE cr.overdueRequests > 0")
    List<ComplianceReport> findReportsWithOverdueRequests();

    /**
     * Get total requests across all reports for regulation
     */
    @Query("SELECT COALESCE(SUM(cr.totalRequests), 0) FROM ComplianceReport cr " +
           "WHERE cr.regulation = :regulation")
    long getTotalRequestsByRegulation(@Param("regulation") Regulation regulation);

    /**
     * Get average compliance rate for regulation
     */
    @Query("SELECT AVG(cr.complianceRate) FROM ComplianceReport cr " +
           "WHERE cr.regulation = :regulation AND cr.complianceRate IS NOT NULL")
    Double getAverageComplianceRate(@Param("regulation") Regulation regulation);

    /**
     * Count reports by regulation
     */
    long countByRegulation(Regulation regulation);

    /**
     * Count published reports
     */
    long countByIsPublished(Boolean published);
}
