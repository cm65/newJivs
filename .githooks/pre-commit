#!/bin/bash

################################################################################
# JiVS Platform - Pre-commit Hook
#
# Runs quick tests before allowing commits to catch issues early.
# This is part of the continuous testing strategy to prevent bugs.
#
# Tests run:
# - Contract tests for changed files
# - Unit tests for changed modules
# - Linting and formatting checks
#
# To skip (use sparingly): git commit --no-verify
################################################################################

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

echo -e "${BOLD}${BLUE}🔍 JiVS Pre-commit Testing${NC}"
echo -e "${CYAN}Running quick tests to catch issues early...${NC}\n"

# Get list of changed files
CHANGED_FILES=$(git diff --cached --name-only)
BACKEND_CHANGED=false
FRONTEND_CHANGED=false
CONTRACT_CHANGED=false

# Check what has changed
for file in $CHANGED_FILES; do
    if [[ $file == backend/* ]]; then
        BACKEND_CHANGED=true
        if [[ $file == */controller/* ]] || [[ $file == */Contract*.java ]]; then
            CONTRACT_CHANGED=true
        fi
    elif [[ $file == frontend/* ]]; then
        FRONTEND_CHANGED=true
        if [[ $file == */services/* ]] || [[ $file == *.pact.test.ts ]]; then
            CONTRACT_CHANGED=true
        fi
    fi
done

# Track test results
TESTS_PASSED=true
FAILED_TESTS=""

# Function to run tests
run_test() {
    local test_name=$1
    local test_command=$2

    echo -e "${CYAN}▶ Running $test_name...${NC}"

    if eval "$test_command" > /dev/null 2>&1; then
        echo -e "${GREEN}✅ $test_name passed${NC}"
        return 0
    else
        echo -e "${RED}❌ $test_name failed${NC}"
        TESTS_PASSED=false
        FAILED_TESTS="$FAILED_TESTS\n  - $test_name"
        return 1
    fi
}

# Run backend tests if backend files changed
if [ "$BACKEND_CHANGED" = true ]; then
    echo -e "${BOLD}${CYAN}Backend changes detected${NC}\n"

    # Run checkstyle
    run_test "Backend checkstyle" "cd backend && mvn checkstyle:check -q"

    # Run unit tests for changed files
    if [ "$CONTRACT_CHANGED" = true ]; then
        run_test "Backend contract tests" "cd backend && mvn test -Dtest='*ContractTest' -q"
    fi

    # Quick unit test run (only for changed modules)
    run_test "Backend unit tests (quick)" "cd backend && mvn test -Dtest='!*IntegrationTest,!*ContractTest' -DfailIfNoTests=false -q"
fi

# Run frontend tests if frontend files changed
if [ "$FRONTEND_CHANGED" = true ]; then
    echo -e "${BOLD}${CYAN}Frontend changes detected${NC}\n"

    # Run ESLint
    run_test "Frontend linting" "cd frontend && npm run lint --silent"

    # Run TypeScript check
    run_test "TypeScript compilation" "cd frontend && npx tsc --noEmit"

    # Run contract tests if service files changed
    if [ "$CONTRACT_CHANGED" = true ]; then
        run_test "Frontend contract tests" "cd frontend && npm run test:contracts --silent"
    fi

    # Quick Jest test run
    run_test "Frontend unit tests (quick)" "cd frontend && npm test -- --passWithNoTests --watchAll=false --silent"
fi

# Check for console.log statements (excluding test files)
echo -e "${CYAN}▶ Checking for console.log statements...${NC}"
CONSOLE_LOGS=$(git diff --cached --name-only | grep -E '\.(ts|tsx|js|jsx)$' | grep -v test | xargs grep -l 'console\.log' 2>/dev/null || true)
if [ ! -z "$CONSOLE_LOGS" ]; then
    echo -e "${YELLOW}⚠️  Warning: console.log found in:${NC}"
    echo "$CONSOLE_LOGS"
    echo -e "${YELLOW}Consider removing before commit${NC}"
fi

# Check for TODO comments
echo -e "${CYAN}▶ Checking for TODO comments...${NC}"
TODO_COUNT=$(git diff --cached | grep -c "^+.*TODO" || true)
if [ "$TODO_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}⚠️  Found $TODO_COUNT new TODO comments${NC}"
fi

echo ""

# Summary
if [ "$TESTS_PASSED" = true ]; then
    echo -e "${BOLD}${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BOLD}${GREEN}✅ All pre-commit tests passed!${NC}"
    echo -e "${BOLD}${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo -e "${CYAN}Your commit is ready. The continuous testing pipeline${NC}"
    echo -e "${CYAN}will run the full test suite after push.${NC}"
    exit 0
else
    echo -e "${BOLD}${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BOLD}${RED}❌ Pre-commit tests failed!${NC}"
    echo -e "${BOLD}${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${RED}Failed tests:$FAILED_TESTS${NC}"
    echo ""
    echo -e "${YELLOW}Fix the issues above and try again.${NC}"
    echo -e "${YELLOW}To bypass (not recommended): git commit --no-verify${NC}"
    exit 1
fi