version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jivs-postgres
    environment:
      POSTGRES_DB: jivs
      POSTGRES_USER: jivs_user
      POSTGRES_PASSWORD: jivs_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - jivs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jivs_user -d jivs"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Distributed Locking
  redis:
    image: redis:7-alpine
    container_name: jivs-redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jivs-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for Full-Text Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: jivs-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - jivs-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: jivs-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: jivs_user
      RABBITMQ_DEFAULT_PASS: rabbitmq_password
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - jivs-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO for S3-Compatible Storage (Development)
  minio:
    image: minio/minio:latest
    container_name: jivs-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - jivs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: jivs-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - jivs-network
    depends_on:
      - backend

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: jivs-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - jivs-network
    depends_on:
      - prometheus

  # JiVS Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: jivs-backend
    environment:
      SPRING_PROFILES_ACTIVE: local
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: jivs
      DB_USER: jivs_user
      DB_PASSWORD: jivs_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: jivs_user
      RABBITMQ_PASSWORD: rabbitmq_password
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      JWT_SECRET: dev-jwt-secret-change-in-production
      ENCRYPTION_KEY: dev-encryption-key-change-in-production
    ports:
      - "8080:8080"
      - "5005:5005" # Remote debugging
    volumes:
      - ./backend/src:/app/src
      - ./backend/target:/app/target
      - backend_storage:/app/storage
    networks:
      - jivs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: >
      sh -c "
        ./mvnw clean install -DskipTests &&
        java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
             -jar target/jivs-platform-*.jar
      "

  # JiVS Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: jivs-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:8080/api
      VITE_WS_URL: ws://localhost:8080/ws
    ports:
      - "3001:3001"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - frontend_node_modules:/app/node_modules
    networks:
      - jivs-network
    depends_on:
      - backend
    command: npm run dev -- --host 0.0.0.0 --port 3001

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: jivs-adminer
    ports:
      - "8081:8080"
    networks:
      - jivs-network
    depends_on:
      - postgres

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: jivs-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - jivs-network

networks:
  jivs-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backend_storage:
    driver: local
  frontend_node_modules:
    driver: local
